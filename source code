import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# --- STEP 1: Generate and Save Synthetic Data ---
data = {
    "Contract Length": [random.choice([1, 12, 24, 36]) for _ in range(15)],
    "Monthly Charges": [round(random.uniform(20, 120), 2) for _ in range(15)],
    "Internet Service Type": [random.choice(["DSL", "Fiber optic", "No"]) for _ in range(15)],
    "Churned": [random.choice(["Yes", "No"]) for _ in range(15)]
}
df_synthetic = pd.DataFrame(data)
df_synthetic.to_csv("synthetic_telco_churn_sample.csv", index=False)

# --- STEP 2: Load Data ---
df = pd.read_csv("synthetic_telco_churn_sample.csv")

# --- STEP 3: Preprocessing ---
categorical_cols = df.select_dtypes(include=['object']).columns
le = LabelEncoder()
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

# --- STEP 4: Feature/Target split ---
X = df.drop('Churned', axis=1)
y = df['Churned']

# --- STEP 5: Train/Test split ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- STEP 6: Scaling ---
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# --- STEP 7: Train model ---
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# --- STEP 8: Evaluation ---
y_pred = model.predict(X_test_scaled)
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# --- STEP 9: Feature Importance Plot ---
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(8, 5))
sns.barplot(x=importances[indices], y=X.columns[indices])
plt.title("Feature Importances")
plt.tight_layout()
plt.show()
